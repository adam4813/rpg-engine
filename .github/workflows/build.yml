# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json

name: RPG Game

on:
  pull_request:
  push:
    tags: [v*]

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os:
          [
            windows-latest,
            windows-2019,
            ubuntu-20.04,
            ubuntu-18.04,
            macOS-latest,
          ]
        arch: [x86, x64]
        build_config: [debug, release]
        include:
          - os: windows-latest
            vcpkgTripletOs: windows
          - os: windows-2019
            vcpkgTripletOs: windows
          - os: ubuntu-20.04
            vcpkgTripletOs: linux
          - os: ubuntu-18.04
            vcpkgTripletOs: linux
          - os: macOS-latest
            vcpkgTripletOs: osx
        exclude:
          - os: ubuntu-20.04
            arch: x86
          - os: ubuntu-18.04
            arch: x86
          - os: macOS-latest
          - os: macOS-latest
            arch: x86
    runs-on: ${{ matrix.os }}
    env:
      CONFIG_PRESET: ninja-multi-vcpkg
      VCPKG_DEFAULT_TRIPLET: ${{ matrix.arch }}-${{ matrix.vcpkgTripletOs }}
      VCPKG_COMMIT_ID: f78f4440df86358575dea65e748a39fdad41eb85
      GCC_VERSION: 10
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - uses: lukka/get-cmake@latest
      - name: Install os deps (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install libgl1-mesa-dev xorg-dev libglu1-mesa-dev libxinerama-dev libxcursor-dev p7zip-full -y
      - name: Switch gcc version (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-${{ env.GCC_VERSION }} ${{ env.GCC_VERSION }}
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-${{ env.GCC_VERSION }} ${{ env.GCC_VERSION }}
      - name: Switch gcc version (MacOS)
        if: runner.os == 'MacOS'
        run: |
          alias gcc='gcc-${{ env.GCC_VERSION }}'
          alias g++='g++-${{ env.GCC_VERSION }}'
      - name: Restore artifacts, or run vcpkg, build and cache artifacts
        uses: lukka/run-vcpkg@v10
        with:
          appendedCacheKey: ${{ matrix.os}}-${{ matrix.arch }}
          vcpkgGitCommitId: ${{ env.VCPKG_COMMIT_ID }}
      - name: Configure cmake and build
        uses: lukka/run-cmake@v10
        with:
          configurePreset: ${{ env.CONFIG_PRESET }}
          buildPreset: ${{ env.CONFIG_PRESET }}-${{ matrix.build_config }}
          #testPreset: ${{ env.CONFIG_PRESET }}-tests-${{ matrix.build_config }}
      - name: Upload the build artifact (Release only)
        if: matrix.build_config == 'release'
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.os }}-${{ matrix.arch }}
          path: |
            ${{ env.CLIENT_BUILD_DIR }}/RelWithDebInfo/rpg-client*
            ${{ env.CLIENT_BUILD_DIR }}/RelWithDebInfo/*.dll
            ${{ env.SERVER_BUILD_DIR }}/RelWithDebInfo/rpg-server*
          if-no-files-found: ignore
        env:
          CLIENT_BUILD_DIR: ${{ github.workspace }}/builds/${{ env.CONFIG_PRESET }}/client
          SERVER_BUILD_DIR: ${{ github.workspace }}/builds/${{ env.CONFIG_PRESET }}/server
  publish:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    name: Upload Release Asset(s)
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3
      - name: LS files system
        run: ls
      - name: Package release
        run: |
          for i in */; do zip --junk-paths -r -u "${i%/}.zip" "$i/client/RelWithDebInfo"; done
          for i in */; do zip --junk-paths -r -u "${i%/}.zip" "$i/server/RelWithDebInfo"; done
      - name: Upload Release Asset
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref }}
          name: Release ${{ github.ref }}
          files: "*.zip"
          draft: false
          prerelease: false
