# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json

name: RPG Game

on:
  pull_request:
  push:
    tags: [v*]

env:
  CONFIG_PRESET: ninja-multi-vcpkg
  VCPKG_COMMIT_ID: f78f4440df86358575dea65e748a39fdad41eb85

jobs:
  build-non-windows:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, ubuntu-latest, ubuntu-18.04, macOS-12, macOS-latest]
        compiler: [gcc-11, gcc-12, llvm-13, llvm-14]
        build_preset: [debug, release]
        exclude:
          - os: ubuntu-18.04
            compiler: gcc-12
          - os: ubuntu-latest
            compiler: gcc-12
          - os: ubuntu-22.04
            compiler: llvm-13
          - os: macOS-12
          - os: macOS-latest
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - uses: lukka/get-cmake@latest
      - name: Install os deps (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install libgl1-mesa-dev xorg-dev libglu1-mesa-dev libxinerama-dev libxcursor-dev p7zip-full -y
      - name: Setup Cpp
        uses: aminya/setup-cpp@v1
        with:
          compiler: ${{ matrix.compiler }}
      - uses: ./.github/actions/setup-vcpkg
      - name: Configure cmake and build
        uses: lukka/run-cmake@v10
        with:
          configurePreset: ${{ env.CONFIG_PRESET }}
          buildPreset: ${{ env.CONFIG_PRESET }}-${{ matrix.build_preset }}
          #testPreset: ${{ env.CONFIG_PRESET }}-tests-${{ matrix.build_preset }}
      - uses: ./.github/actions/upload-artifact
        with:
          artifactName: ${{ matrix.arch }}-${{ matrix.os }}-${{ matrix.build_preset }}
          buildPreset: ${{ matrix.build_preset }}
  build-windows:
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, windows-2019]
        arch: [x64, x86]
        compiler: [gcc-11, gcc-12, llvm-13, llvm-14, msvc]
        build_preset: [debug, release]
        exclude:
          - compiler: gcc-11
          - compiler: gcc-12
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - uses: lukka/get-cmake@latest
      - name: Setup Cpp
        if: matrix.compiler != 'msvc'
        uses: aminya/setup-cpp@v1
        with:
          compiler: ${{ matrix.compiler }}
          vcvarsall: true
      - uses: ./.github/actions/setup-vcpkg
        with:
          arch: ${{ matrix.arch }}
      - name: Configure cmake and build
        uses: lukka/run-cmake@v10
        with:
          configurePreset: ${{ env.CONFIG_PRESET }}
          buildPreset: ${{ env.CONFIG_PRESET }}-${{ matrix.build_preset }}
          #testPreset: ${{ env.CONFIG_PRESET }}-tests-${{ matrix.build_preset }}
  publish_artifact:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        arch: [x64]
        build_preset: [release]
        include:
          - os: windows-latest
            arch: x86
    runs-on: ${{ matrix.os }}
    needs: [build-non-windows, build-windows]
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - uses: lukka/get-cmake@latest
      - name: Install os deps (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install libgl1-mesa-dev xorg-dev libglu1-mesa-dev libxinerama-dev libxcursor-dev p7zip-full -y
      - name: Setup Cpp (Non-Windows)
        if: runner.os != 'Windows'
        uses: aminya/setup-cpp@v1
        with:
          compiler: llvm-14
      - uses: ./.github/actions/setup-vcpkg
        with:
          arch: ${{ matrix.arch }}
      - name: Configure cmake and build
        uses: lukka/run-cmake@v10
        with:
          configurePreset: ${{ env.CONFIG_PRESET }}
          buildPreset: ${{ env.CONFIG_PRESET }}-${{ matrix.build_preset }}
      - uses: ./.github/actions/upload-artifact
        with:
          artifactName: ${{ matrix.arch }}-${{ matrix.os }}-${{ matrix.build_preset }}
          buildPreset: ${{ matrix.build_preset }}
  publish:
    runs-on: ubuntu-latest
    needs: publish_artifact
    if: startsWith(github.ref, 'refs/tags/v')
    name: Upload Release Asset(s)
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3
      - name: Package release
        run: |
          for i in */; do zip --junk-paths -r -u "${i%/}.zip" "$i/client/${{ env.BUILD_CONFIG_DIR }}"; done
          for i in */; do zip --junk-paths -r -u "${i%/}.zip" "$i/server/${{ env.BUILD_CONFIG_DIR }}"; done
      - name: Upload Release Asset
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref }}
          name: Release ${{ github.ref_name }}
          files: "*.zip"
          draft: false
          prerelease: false
          discussion_category_name: Releases
