# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json

name: RPG Game

on:
  pull_request:
  push:
    tags: [v*]

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest, macOS-latest]
        arch: [x86, x64]
        build_config: [debug, release]
        exclude:
          - os: ubuntu-latest
            arch: x86
          - os: macOS-latest
            arch: x86
          - os: macOS-latest
    runs-on: ${{ matrix.os }}
    env:
      CONFIG_PRESET: ninja-multi-vcpkg
      VCPKG_COMMIT_ID: f78f4440df86358575dea65e748a39fdad41eb85
      GCC_VERSION: 10
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - name: Set VCPKG_DEFAULT_TRIPLET
        shell: bash
        run: |
          case ${{ runner.os }} in
          Windows) tripletOs=windows ;;
          Linux) tripletOs=linux ;;
          macOS) tripletOs=osx ;;
          esac
          echo "VCPKG_DEFAULT_TRIPLET=${{ matrix.arch }}-$tripletOs" >> $GITHUB_ENV
      - uses: lukka/get-cmake@latest
      - name: Install os deps (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install libgl1-mesa-dev xorg-dev libglu1-mesa-dev libxinerama-dev libxcursor-dev p7zip-full -y
      - name: Switch gcc version (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-${{ env.GCC_VERSION }} ${{ env.GCC_VERSION }}
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-${{ env.GCC_VERSION }} ${{ env.GCC_VERSION }}
      - name: Switch gcc version (MacOS)
        if: runner.os == 'MacOS'
        run: |
          alias gcc='gcc-${{ env.GCC_VERSION }}'
          alias g++='g++-${{ env.GCC_VERSION }}'
      - name: Restore artifacts, or run vcpkg, build and cache artifacts
        uses: lukka/run-vcpkg@v10
        with:
          appendedCacheKey: ${{ env.VCPKG_DEFAULT_TRIPLET }}
          vcpkgGitCommitId: ${{ env.VCPKG_COMMIT_ID }}
      - name: Configure cmake and build
        uses: lukka/run-cmake@v10
        with:
          configurePreset: ${{ env.CONFIG_PRESET }}
          buildPreset: ${{ env.CONFIG_PRESET }}-${{ matrix.build_config }}
          #testPreset: ${{ env.CONFIG_PRESET }}-tests-${{ matrix.build_config }
      - name: Set BUILD_CONFIG_DIR
        shell: bash
        run: |
          case ${{ matrix.build_config }} in
          debug) configDir=Debug ;;
          release) configDir=RelWithDebInfo ;;
          esac
          echo "BUILD_CONFIG_DIR=$configDir" >> $GITHUB_ENV
      - name: Upload the build artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.VCPKG_DEFAULT_TRIPLET }}-${{ matrix.build_config }}
          path: |
            ${{ env.CLIENT_BUILD_DIR }}/rpg-client*
            ${{ env.CLIENT_BUILD_DIR }}/*.dll
            ${{ env.SERVER_BUILD_DIR }}/rpg-server*
          if-no-files-found: ignore
        env:
          CLIENT_BUILD_DIR: ${{ github.workspace }}/builds/${{ env.CONFIG_PRESET }}/client/${{ env.BUILD_CONFIG_DIR }}
          SERVER_BUILD_DIR: ${{ github.workspace }}/builds/${{ env.CONFIG_PRESET }}/server/${{ env.BUILD_CONFIG_DIR }}
  publish:
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    name: Upload Release Asset(s)
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3
      - name: Package release
        run: |
          for i in */; do zip --junk-paths -r -u "${i%/}.zip" "$i/client/${{ env.BUILD_CONFIG_DIR }}"; done
          for i in */; do zip --junk-paths -r -u "${i%/}.zip" "$i/server/${{ env.BUILD_CONFIG_DIR }}"; done
      - name: Upload Release Asset
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref }}
          name: Release ${{ github.ref_name }}
          files: "*.zip"
          draft: false
          prerelease: false
          discussion_category_name: Releases
