# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json

name: RPG Game

on:
  pull_request:
  push:
    tags: [v*]

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        # https://www.scivision.dev/github-actions-strategy-array-exclude/
        img:
          [
            { os: windows-latest, tripletOs: windows, arch: x86 },
            { os: windows-2019, tripletOs: windows, arch: x86 },
            { os: windows-latest, tripletOs: windows, arch: x64 },
            { os: windows-2019, tripletOs: windows, arch: x64 },
            { os: ubuntu-22.04, tripletOs: linux, arch: x64 },
            { os: ubuntu-latest, tripletOs: linux, arch: x64 },
            { os: macOS-11, tripletOs: osx, arch: x64 },
            { os: macOS-latest, tripletOs: osx, arch: x64 },
          ]
        build_preset:
          [{ name: debug, outDir: Debug }, { name: release, outDir: Release }]
        compiler: [gcc-11, gcc-12, llvm-13.0.0, llvm-14]
        include:
          # MSVC should compile the same regardless of windows version
          - img: { os: windows-latest, tripletOs: windows, arch: x86 }
            build_preset: { name: debug, outDir: Debug }
            compiler: msvc
          - img: { os: windows-latest, tripletOs: windows, arch: x86 }
            build_preset: { name: release, outDir: Release }
            compiler: msvc
          - img: { os: windows-latest, tripletOs: windows, arch: x64 }
            build_preset: { name: debug, outDir: Debug }
            compiler: msvc
          - img: { os: windows-latest, tripletOs: windows, arch: x64 }
            build_preset: { name: release, outDir: Release }
            compiler: msvc
        exclude:
          - img: { os: macOS-11 }

          - img: { os: windows-2019 }
            compiler: gcc-11
          - img: { os: windows-latest }
            compiler: gcc-11
          - img: { os: macOS-latest }
            compiler: gcc-11

          - compiler: gcc-12

          - img: { os: windows-2019 }
            compiler: llvm-13.0.0
          - img: { os: windows-latest }
            compiler: llvm-13.0.0
          - img: { os: macOS-latest }
            compiler: llvm-13.0.0
    runs-on: ${{ matrix.img.os }}
    env:
      CONFIG_PRESET: ninja-multi-vcpkg
      VCPKG_COMMIT_ID: 6f7ffeb18f99796233b958aaaf14ec7bd4fb64b2
      VCPKG_DEFAULT_TRIPLET: ${{ matrix.img.arch }}-${{ matrix.img.tripletOs }}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - uses: lukka/get-cmake@latest
      - name: Install os deps (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install libgl1-mesa-dev xorg-dev libglu1-mesa-dev libxinerama-dev libxcursor-dev p7zip-full -y
      - name: Setup Cpp
        if: matrix.compiler != 'msvc'
        uses: aminya/setup-cpp@v1
        with:
          compiler: ${{ matrix.compiler }}
          vcvarsall: ${{ runner.os == 'Windows' }}
      - name: Restore artifacts, or run vcpkg, build and cache artifacts
        uses: lukka/run-vcpkg@v10
        with:
          appendedCacheKey: ${{ env.VCPKG_DEFAULT_TRIPLET }}
          vcpkgGitCommitId: ${{ env.VCPKG_COMMIT_ID }}
      - name: Configure cmake and build
        uses: lukka/run-cmake@v10
        with:
          configurePreset: ${{ env.CONFIG_PRESET }}
          buildPreset: ${{ env.CONFIG_PRESET }}-${{ matrix.build_preset.name }}
          testPreset: ${{ env.CONFIG_PRESET }}-${{ matrix.build_preset.name }}
      - name: Upload the build artifact
        uses: actions/upload-artifact@v3
        if: contains(matrix.img.os, 'latest') && matrix.build_preset.name == 'release'
        with:
          name: ${{ env.VCPKG_DEFAULT_TRIPLET }}-${{ matrix.build_preset.name }}
          path: |
            ${{ env.CLIENT_BUILD_DIR }}/rpg-client*
            ${{ env.CLIENT_BUILD_DIR }}/*.dll
            ${{ env.SERVER_BUILD_DIR }}/rpg-server*
          if-no-files-found: ignore
        env:
          CLIENT_BUILD_DIR: ${{ github.workspace }}/builds/${{ env.CONFIG_PRESET }}/client/${{ matrix.build_preset.outDir }}
          SERVER_BUILD_DIR: ${{ github.workspace }}/builds/${{ env.CONFIG_PRESET }}/server/${{ matrix.build_preset.outDir }}
  publish:
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    name: Upload Release Asset(s)
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3
      - name: Package release
        run: |
          for i in */; do zip --junk-paths -r -u "${i%/}.zip" "$i/client/${{ matrix.build_preset.outDir }}"; done
          for i in */; do zip --junk-paths -r -u "${i%/}.zip" "$i/server/${{ matrix.build_preset.outDir }}"; done
      - name: Upload Release Asset
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref }}
          name: Release ${{ github.ref_name }}
          files: "*.zip"
          draft: false
          prerelease: false
          discussion_category_name: Releases
